version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.2.1

executors:
  docker-node-executor:
    docker:
      - image: circleci/node:12.18.0

commands:
  install-test-build:
    steps:
      - checkout
      - run:
          name: Verify node version
          command: node --version
      - restore_cache:
          key: node-modules-{{ checksum "package-lock.json" }}
      - run:
          name: Install packages
          command: npm install
      - save_cache:
          key: node-modules-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Run unit tests
          command: npm test
      - run:
          name: Build for production
          command: npm run build
  s3-sync-invalidate-cache:
    parameters:
      to:
        description: A URI to an S3 bucket, i.e. 's3://bucket-name/path'
        type: string
      dist-id:
        description: CloudFront Distribution ID
        type: string
    steps:
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: S3 Sync
          command: aws s3 sync --delete ./build/ <<parameters.to>>
      - run:
          name: Invalidate Cache
          command: aws cloudfront create-invalidation --distribution-id <<parameters.dist-id>> --paths "/apps/pre-arrivals/*"


jobs:
  test-build-stage:
    executor: docker-node-executor
    environment:
      PUBLIC_URL: https://d1jwlxx7lougvg.cloudfront.net/apps/pre-arrivals
      REACT_APP_ENV_ENVIRONMENT: stage
      REACT_APP_ENV_API_BASE_URL: https://devtest0.kipsu.com/acct/api/v3/
      REACT_APP_SERVER_INJECTED_GUID: "{{ guid }}"
      REACT_APP_SERVER_INJECTED_MOBILE: "{{ mobile }}"
      REACT_APP_SERVER_INJECTED_CONSENT: "{{ consent }}"
    steps:
      - run:
          name: A stage API key should be set for the project
          command: echo $REACT_APP_ENV_API_KEY_STAGE
      - install-test-build
  build-deploy-stage:
    executor: docker-node-executor
    environment:
      PUBLIC_URL: https://d1jwlxx7lougvg.cloudfront.net/apps/pre-arrivals
      REACT_APP_ENV_ENVIRONMENT: stage
      REACT_APP_ENV_API_BASE_URL: https://devtest0.kipsu.com/acct/api/v3/
      REACT_APP_SERVER_INJECTED_GUID: "{{ guid }}"
      REACT_APP_SERVER_INJECTED_MOBILE: "{{ mobile }}"
      REACT_APP_SERVER_INJECTED_CONSENT: "{{ consent }}"
    steps:
      - run:
          name: A stage API key should be set for the project
          command: echo $REACT_APP_ENV_API_KEY_STAGE
      - install-test-build
      - s3-sync-invalidate-cache:
          to: s3://cdn-devtest0.kipsu.com/apps/pre-arrivals
          dist-id: EN7PN7Z9GA2CS
  build-deploy-prod:
    executor: docker-node-executor
    environment:
      PUBLIC_URL: https://d8zld6nk6y5i2.cloudfront.net/apps/pre-arrivals
      REACT_APP_ENV_ENVIRONMENT: prod
      REACT_APP_ENV_API_BASE_URL: https://secure.kipsu.com/acct/api/v3/
      REACT_APP_SERVER_INJECTED_GUID: "{{ guid }}"
      REACT_APP_SERVER_INJECTED_MOBILE: "{{ mobile }}"
      REACT_APP_SERVER_INJECTED_CONSENT: "{{ consent }}"
    steps:
      - run:
          name: A prod API key should be set for the project
          command: echo $REACT_APP_ENV_API_KEY_PROD
      - install-test-build
      - s3-sync-invalidate-cache:
          to: s3://cdn.kipsu.com/apps/pre-arrivals
          dist-id: E10R2V2UVO9OLC

workflows:
  unit-test-and-build:
    jobs:
      - test-build-stage:
          filters:
            branches:
              ignore:
                - master
                - develop
          context:
            - s3-build
  stage-test-build-deploy:
    jobs:
      - build-deploy-stage:
          filters:
            branches:
              only: develop
          context:
            - s3-build

  prod-test-build-deploy:
    jobs:
      - build-deploy-prod:
          filters:
            branches:
              only: master
          context:
            - s3-build














## This config is equivalent to both the '.circleci/extended/orb-free.yml' and the base '.circleci/config.yml'
#version: 2.1
#
## Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
## See: https://circleci.com/docs/2.0/orb-intro/
#orbs:
#  node: circleci/node@4.7
#
## Invoke jobs via workflows
## See: https://circleci.com/docs/2.0/configuration-reference/#workflows
#workflows:
#  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
#    # Inside the workflow, you define the jobs you want to run.
#    jobs:
#      - node/test:
#          # This is the node version to use for the `cimg/node` tag
#          # Relevant tags can be found on the CircleCI Developer Hub
#          # https://circleci.com/developer/images/image/cimg/node
#          version: '16.10'
#          # If you are using yarn, change the line below from "npm" to "yarn"
#          pkg-manager: npm
